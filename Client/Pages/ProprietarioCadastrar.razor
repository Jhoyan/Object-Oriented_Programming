@using Shared.Models;
@inject IDialogService IDialogService;
@inject ISnackbar Snackbar
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient


<EditForm Model="@proprietario" OnValidSubmit="CadastrarPessoa" OnInvalidSubmit="OnInvalidSubmit">
    <DataAnnotationsValidator />
    <MudDialog Style="width: 900px; height: auto; overflow-y:scroll;">

        <TitleContent>
            <MudText Typo="Typo.h6">Cadastrar Proprietário</MudText>
        </TitleContent>

        <DialogContent>
            <MudPaper Class="d-flex flex-column" Elevation="0">
                <MudPaper Elevation="0" Class="d-flex align-content-start flex-grow-1 gap-4">
                    <MudItem xs="6">
                        <MudTextField @bind-Value="proprietario.Nome" For="@(() => proprietario.Nome)" Label="Nome*" Variant="Variant.Outlined" />
                    </MudItem>
                    @*Por algum motivo o PatternMask parece "sair" do campo quando aplica a máscara. Por isso, antes do usuário terminar de
                    digitar o cpf, ele já recebe a mensagem em vermelho que o cpf deve ter 11 digitos. Necessário correção.*@
                    <MudItem xs="6">
                        <MudDatePicker Class="" For="@(() => proprietario.DataNasc)" Label="Data de Nascimento*" @bind-Date="proprietario.DataNasc" Variant="Variant.Outlined"></MudDatePicker>
                    </MudItem>
                </MudPaper>
                <MudPaper Elevation="0" Class="d-flex align-content-start flex-grow-1 gap-4">
                    <MudItem xs="6">
                        <MudTextField Mask="@(new PatternMask("000.000.000-00"))" @bind-Value="proprietario.Cpf" For="@(() => proprietario.Cpf)" Label="CPF*" Variant="Variant.Outlined" Validation="ValidarCPF" />
                    </MudItem>
                    <MudItem xs="6">

                        <MudTextField Mask="@(new PatternMask("00000000000"))" @bind-Value="proprietario.Cnh" For="@(() => proprietario.Cnh)" Label="CNH*" Variant="Variant.Outlined" Validation="ValidarCNH"></MudTextField>

                    </MudItem>
                </MudPaper>
                <MudPaper Elevation="0" Class="d-flex align-content-start flex-grow-1 flex-column">
                    <MudText Class="mt-3 ml-3">Sexo*</MudText>
                    <MudForm>
                        <MudRadioGroup Class="" @bind-Value="proprietario.Sexo" For="@(() => proprietario.Sexo)">
                            <MudRadio Value="@("M")" Color="Color.Primary">Masculino</MudRadio>
                            <MudRadio Value="@("F")" Color="Color.Secondary">Feminino</MudRadio>
                        </MudRadioGroup>
                    </MudForm>
                </MudPaper>
            </MudPaper>
        </DialogContent>

        <DialogActions>
            <MudButton Class="m-3" OnClick="Cancelar">Cancelar</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto m-3">Cadastrar</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    Proprietario proprietario = new Proprietario();

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
    private void Cancelar()
    {
        MudDialog.Cancel();
    }

    public bool ValidarCNH(string numeroCnh)
    {
        bool cnhValida = false;

        // Pré-validações de formato
        if (numeroCnh.Length == 11)
        {
            // Cálculo do primeiro dígito verificador
            int somaDecrescente = 0;
            int primeiroDigitoVerificador;
            int ajusteSegundoDigito = 0;

            for (int i = 0; i < 9; i++)
            {
                int digito = Convert.ToInt32(numeroCnh[i].ToString());
                int pesoDecrescente = 9 - i;
                somaDecrescente += digito * pesoDecrescente;
            }

            int restoDecrescente = somaDecrescente % 11;
            if (restoDecrescente >= 10)
            {
                primeiroDigitoVerificador = 0;
                ajusteSegundoDigito = 2;
            }
            else
            {
                primeiroDigitoVerificador = restoDecrescente;
            }

            // Cálculo do segundo dígito verificador
            int somaCrescente = 0;
            for (int i = 0; i < 9; i++)
            {
                int digito = Convert.ToInt32(numeroCnh[i].ToString());
                int pesoCrescente = i + 1;
                somaCrescente += digito * pesoCrescente;
            }

            int restoCrescente = somaCrescente % 11;
            int segundoDigitoVerificador = (restoCrescente >= 10)
                ? 0
                : restoCrescente - ajusteSegundoDigito;

            // Combinação e comparação com os dígitos originais
            string digitosGerados = primeiroDigitoVerificador.ToString()
                                  + segundoDigitoVerificador.ToString();
            string digitosOriginais = numeroCnh.Substring(9, 2);

            cnhValida = (digitosGerados == digitosOriginais);
        }
        return cnhValida;
    }

    public bool ValidarCPF(string cpf)
    {
        cpf = cpf.Replace(".", "").Replace("-", "").Trim();
        int soma = 0;
        int indice = 0;
        for (int i = 10; i >= 2; i--)
        {
            soma += i * Convert.ToInt32(cpf.Substring(indice, 1));
            indice++;
        }
        int verificador1 = 11 - (soma % 11);
        if (verificador1 >= 10)
            verificador1 = 0;

        soma = 0;
        indice = 0;
        for (int i = 11; i >= 2; i--)
        {
            if (i != 2)
            {
                soma += i * Convert.ToInt32(cpf.Substring(indice, 1));
                indice++;
            }
            else
            {
                soma += i * verificador1;
            }
        }

        int verificador2 = 11 - (soma % 11);
        if (verificador2 >= 10)
            verificador2 = 0;

        if (cpf.Length != 11)
        {
            return false;
        }
        else
        {
            string verificadorStr1 = cpf.Substring(09, 1);
            string verificadorStr2 = cpf.Substring(10, 1);
            if (verificadorStr1 != verificador1.ToString() || verificadorStr2 != verificador2.ToString())
                return false;

            return true;
        }
    }

    private async Task CadastrarPessoa()
    {
        try
        {
            if (!ValidarCPF(proprietario.Cpf))
            {
                throw new Exception("CPF inválido");
            }            
            if (!ValidarCNH(proprietario.Cnh))
            {
                throw new Exception("CNH inválida");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            return;
        }

        string api = "api/pessoa/incluir";
        HttpResponseMessage httpResponse = await httpClient.PostAsJsonAsync<Proprietario>(api, proprietario);

        if(!httpResponse.IsSuccessStatusCode)        
        {
            Snackbar.Add("Erro ao cadastrar pessoa", Severity.Error);
            return;
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(true));            
            Snackbar.Add("O proprietário foi cadastrado com sucesso", Severity.Success);
        }
        
    }
    private void OnInvalidSubmit()
    {
        //Snackbar.Add("Erro", Severity.Error);
    }
}
